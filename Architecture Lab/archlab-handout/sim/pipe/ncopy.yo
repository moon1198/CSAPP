                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
                            | #
0x000:                      | 	.pos 0
0x000: 30f40005000000000000 | 	irmovq stack, %rsp
0x00a: 804800000000000000   | 	call main
0x013: 00                   | 	halt
                            | 	
0x018:                      | 	.align 8
0x018:                      | src:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: b000000000000000     | 	.quad 0x0b0
0x028: 000c000000000000     | 	.quad 0xc00
                            | 
0x030:                      | dest:
0x030: 1101000000000000     | 	.quad 0x111
0x038: 2202000000000000     | 	.quad 0x222
0x040: 3303000000000000     | 	.quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq src, %rdi
0x052: 30f63000000000000000 | 	irmovq dest, %rsi
0x05c: 30f20300000000000000 | 	irmovq $3, %rdx
0x066: 807000000000000000   | 	call ncopy
0x06f: 90                   | 	ret
                            | 
0x070:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x070: 6300                 | 	xorq %rax,%rax		# count = 0;
0x072: 707b02000000000000   | 	jmp test1		# if so, goto Done:
                            | 
0x07b: 50a70000000000000000 | Npos0:	mrmovq (%rdi), %r10	# read val from src...
0x085: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x08f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x091: 71a400000000000000   | 	jle Npos1		# if so, goto Npos:
0x09a: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0a4:                      | Npos1:
0x0a4: 50a70800000000000000 | 	mrmovq 0x8(%rdi), %r10
0x0ae: 40a60800000000000000 | 	rmmovq %r10, 0x8(%rsi)	# ...and store it to dst
0x0b8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ba: 71cd00000000000000   | 	jle Npos2		# if so, goto Npos:
0x0c3: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0cd:                      | Npos2:
0x0cd: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x0d7: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)	# ...and store it to dst
0x0e1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0e3: 71f600000000000000   | 	jle Npos3		# if so, goto Npos:
0x0ec: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x0f6:                      | Npos3:
0x0f6: 50a71800000000000000 | 	mrmovq 0x18(%rdi), %r10
0x100: 40a61800000000000000 | 	rmmovq %r10, 0x18(%rsi)	# ...and store it to dst
0x10a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x10c: 711f01000000000000   | 	jle Npos4		# if so, goto Npos:
0x115: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x11f:                      | Npos4:
0x11f: 50a72000000000000000 | 	mrmovq 0x20(%rdi), %r10
0x129: 40a62000000000000000 | 	rmmovq %r10, 0x20(%rsi)	# ...and store it to dst
0x133: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x135: 714801000000000000   | 	jle Npos5		# if so, goto Npos:
0x13e: c0f00100000000000000 | 	iaddq $1, %rax	# count++
                            | 
                            | 
                            | 
                            | 
                            | 
0x148:                      | Npos5:
0x148: 50a72800000000000000 | 	mrmovq 0x28(%rdi), %r10
0x152: 40a62800000000000000 | 	rmmovq %r10, 0x28(%rsi)	# ...and store it to dst
0x15c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x15e: 717101000000000000   | 	jle Npos6		# if so, goto Npos:
0x167: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x171:                      | Npos6:
0x171: 50a73000000000000000 | 	mrmovq 0x30(%rdi), %r10
0x17b: 40a63000000000000000 | 	rmmovq %r10, 0x30(%rsi)	# ...and store it to dst
0x185: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x187: 719a01000000000000   | 	jle Npos7		# if so, goto Npos:
0x190: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x19a:                      | Npos7:
0x19a: 50a73800000000000000 | 	mrmovq 0x38(%rdi), %r10
0x1a4: 40a63800000000000000 | 	rmmovq %r10, 0x38(%rsi)	# ...and store it to dst
0x1ae: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1b0: 71c301000000000000   | 	jle Npos8		# if so, goto Npos:
0x1b9: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x1c3:                      | Npos8:
0x1c3: 50a74000000000000000 | 	mrmovq 0x40(%rdi), %r10
0x1cd: 40a64000000000000000 | 	rmmovq %r10, 0x40(%rsi)	# ...and store it to dst
0x1d7: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1d9: 71ec01000000000000   | 	jle Npos9		# if so, goto Npos:
0x1e2: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x1ec:                      | Npos9:
0x1ec: 50a74800000000000000 | 	mrmovq 0x48(%rdi), %r10
0x1f6: 40a64800000000000000 | 	rmmovq %r10, 0x48(%rsi)	# ...and store it to dst
0x200: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x202: 711502000000000000   | 	jle Npos10		# if so, goto Npos:
0x20b: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x215:                      | Npos10:
0x215: 50a75000000000000000 | 	mrmovq 0x50(%rdi), %r10
0x21f: 40a65000000000000000 | 	rmmovq %r10, 0x50(%rsi)	# ...and store it to dst
0x229: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x22b: 713e02000000000000   | 	jle Npos11		# if so, goto Npos:
0x234: c0f00100000000000000 | 	iaddq $1, %rax	# count++
0x23e:                      | Npos11:
0x23e: 50a75800000000000000 | 	mrmovq 0x58(%rdi), %r10
0x248: 40a65800000000000000 | 	rmmovq %r10, 0x58(%rsi)	# ...and store it to dst
0x252: c0f76000000000000000 | 	iaddq $96, %rdi		
0x25c: c0f66000000000000000 | 	iaddq $96, %rsi		
0x266: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x268: 717b02000000000000   | 	jle test1		# if so, goto Npos:
0x271: c0f00100000000000000 | 	iaddq $1, %rax	# count++
                            | 
                            | 
                            | 
                            | #Npos6:
                            | #	mrmovq 0x28(%rdi), %r10
                            | #	rmmovq %r10, 0x28(%rsi)	# ...and store it to dst
                            | #	iaddq $48, %rdi		
                            | #	iaddq $48, %rsi		
                            | #	andq %r10, %r10		# val <= 0?
                            | #	jle test1		# if so, goto Npos:
                            | #	iaddq $1, %rax	# count++
                            | 
                            | 
                            | 
                            | 
                            | 
0x27b:                      | test1:
0x27b: c0f2f4ffffffffffffff | 	iaddq $-12, %rdx
0x285: 757b00000000000000   | 	jge Npos0
0x28e: c0f20c00000000000000 | 	iaddq $12, %rdx
                            | 
0x298:                      | test2:
0x298: 6222                 | 	andq %rdx, %rdx
0x29a: 76ac02000000000000   | 	jg L1
0x2a3: 70ed02000000000000   | 	jmp Done
0x2ac:                      | L1:
0x2ac: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2b6: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x2c0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x2ca: 30f80800000000000000 | 	irmovq $8, %r8
                            | 	
0x2d4: 6087                 | 	addq %r8, %rdi
0x2d6: 6086                 | 	addq %r8, %rsi
0x2d8: 62aa                 | 	andq %r10, %r10
0x2da: 719802000000000000   | 	jle test2
0x2e3: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2ed:                      | Done:
0x2ed: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2ee:                      | End:
                            | #/* $end ncopy-ys */
                            | #
0x500:                      | 	.pos 0x500
0x500:                      | stack:
